// Code generated by counterfeiter. DO NOT EDIT.
package interfacesfakes

import (
	"sync"

	"code.cloudfoundry.org/credhub-cli/credhub/credentials"
	"code.cloudfoundry.org/credhub-cli/credhub/permissions"
	"github.com/cf-platform-eng/uaa-client-crud/pkg/interfaces"
)

type FakeCredHubAPI struct {
	AddPermissionStub        func(string, string, []string) (*permissions.Permission, error)
	addPermissionMutex       sync.RWMutex
	addPermissionArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 []string
	}
	addPermissionReturns struct {
		result1 *permissions.Permission
		result2 error
	}
	addPermissionReturnsOnCall map[int]struct {
		result1 *permissions.Permission
		result2 error
	}
	DeleteCredentialStub        func(string) error
	deleteCredentialMutex       sync.RWMutex
	deleteCredentialArgsForCall []struct {
		arg1 string
	}
	deleteCredentialReturns struct {
		result1 error
	}
	deleteCredentialReturnsOnCall map[int]struct {
		result1 error
	}
	DeletePermissionStub        func(string) (*permissions.Permission, error)
	deletePermissionMutex       sync.RWMutex
	deletePermissionArgsForCall []struct {
		arg1 string
	}
	deletePermissionReturns struct {
		result1 *permissions.Permission
		result2 error
	}
	deletePermissionReturnsOnCall map[int]struct {
		result1 *permissions.Permission
		result2 error
	}
	FindByPathStub        func(string) (credentials.FindResults, error)
	findByPathMutex       sync.RWMutex
	findByPathArgsForCall []struct {
		arg1 string
	}
	findByPathReturns struct {
		result1 credentials.FindResults
		result2 error
	}
	findByPathReturnsOnCall map[int]struct {
		result1 credentials.FindResults
		result2 error
	}
	GetPermissionByPathActorStub        func(string, string) (*permissions.Permission, error)
	getPermissionByPathActorMutex       sync.RWMutex
	getPermissionByPathActorArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getPermissionByPathActorReturns struct {
		result1 *permissions.Permission
		result2 error
	}
	getPermissionByPathActorReturnsOnCall map[int]struct {
		result1 *permissions.Permission
		result2 error
	}
	UpdatePermissionStub        func(string, string, string, []string) (*permissions.Permission, error)
	updatePermissionMutex       sync.RWMutex
	updatePermissionArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 []string
	}
	updatePermissionReturns struct {
		result1 *permissions.Permission
		result2 error
	}
	updatePermissionReturnsOnCall map[int]struct {
		result1 *permissions.Permission
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCredHubAPI) AddPermission(arg1 string, arg2 string, arg3 []string) (*permissions.Permission, error) {
	var arg3Copy []string
	if arg3 != nil {
		arg3Copy = make([]string, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.addPermissionMutex.Lock()
	ret, specificReturn := fake.addPermissionReturnsOnCall[len(fake.addPermissionArgsForCall)]
	fake.addPermissionArgsForCall = append(fake.addPermissionArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 []string
	}{arg1, arg2, arg3Copy})
	fake.recordInvocation("AddPermission", []interface{}{arg1, arg2, arg3Copy})
	fake.addPermissionMutex.Unlock()
	if fake.AddPermissionStub != nil {
		return fake.AddPermissionStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.addPermissionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCredHubAPI) AddPermissionCallCount() int {
	fake.addPermissionMutex.RLock()
	defer fake.addPermissionMutex.RUnlock()
	return len(fake.addPermissionArgsForCall)
}

func (fake *FakeCredHubAPI) AddPermissionCalls(stub func(string, string, []string) (*permissions.Permission, error)) {
	fake.addPermissionMutex.Lock()
	defer fake.addPermissionMutex.Unlock()
	fake.AddPermissionStub = stub
}

func (fake *FakeCredHubAPI) AddPermissionArgsForCall(i int) (string, string, []string) {
	fake.addPermissionMutex.RLock()
	defer fake.addPermissionMutex.RUnlock()
	argsForCall := fake.addPermissionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCredHubAPI) AddPermissionReturns(result1 *permissions.Permission, result2 error) {
	fake.addPermissionMutex.Lock()
	defer fake.addPermissionMutex.Unlock()
	fake.AddPermissionStub = nil
	fake.addPermissionReturns = struct {
		result1 *permissions.Permission
		result2 error
	}{result1, result2}
}

func (fake *FakeCredHubAPI) AddPermissionReturnsOnCall(i int, result1 *permissions.Permission, result2 error) {
	fake.addPermissionMutex.Lock()
	defer fake.addPermissionMutex.Unlock()
	fake.AddPermissionStub = nil
	if fake.addPermissionReturnsOnCall == nil {
		fake.addPermissionReturnsOnCall = make(map[int]struct {
			result1 *permissions.Permission
			result2 error
		})
	}
	fake.addPermissionReturnsOnCall[i] = struct {
		result1 *permissions.Permission
		result2 error
	}{result1, result2}
}

func (fake *FakeCredHubAPI) DeleteCredential(arg1 string) error {
	fake.deleteCredentialMutex.Lock()
	ret, specificReturn := fake.deleteCredentialReturnsOnCall[len(fake.deleteCredentialArgsForCall)]
	fake.deleteCredentialArgsForCall = append(fake.deleteCredentialArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DeleteCredential", []interface{}{arg1})
	fake.deleteCredentialMutex.Unlock()
	if fake.DeleteCredentialStub != nil {
		return fake.DeleteCredentialStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteCredentialReturns
	return fakeReturns.result1
}

func (fake *FakeCredHubAPI) DeleteCredentialCallCount() int {
	fake.deleteCredentialMutex.RLock()
	defer fake.deleteCredentialMutex.RUnlock()
	return len(fake.deleteCredentialArgsForCall)
}

func (fake *FakeCredHubAPI) DeleteCredentialCalls(stub func(string) error) {
	fake.deleteCredentialMutex.Lock()
	defer fake.deleteCredentialMutex.Unlock()
	fake.DeleteCredentialStub = stub
}

func (fake *FakeCredHubAPI) DeleteCredentialArgsForCall(i int) string {
	fake.deleteCredentialMutex.RLock()
	defer fake.deleteCredentialMutex.RUnlock()
	argsForCall := fake.deleteCredentialArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCredHubAPI) DeleteCredentialReturns(result1 error) {
	fake.deleteCredentialMutex.Lock()
	defer fake.deleteCredentialMutex.Unlock()
	fake.DeleteCredentialStub = nil
	fake.deleteCredentialReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCredHubAPI) DeleteCredentialReturnsOnCall(i int, result1 error) {
	fake.deleteCredentialMutex.Lock()
	defer fake.deleteCredentialMutex.Unlock()
	fake.DeleteCredentialStub = nil
	if fake.deleteCredentialReturnsOnCall == nil {
		fake.deleteCredentialReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteCredentialReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCredHubAPI) DeletePermission(arg1 string) (*permissions.Permission, error) {
	fake.deletePermissionMutex.Lock()
	ret, specificReturn := fake.deletePermissionReturnsOnCall[len(fake.deletePermissionArgsForCall)]
	fake.deletePermissionArgsForCall = append(fake.deletePermissionArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DeletePermission", []interface{}{arg1})
	fake.deletePermissionMutex.Unlock()
	if fake.DeletePermissionStub != nil {
		return fake.DeletePermissionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deletePermissionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCredHubAPI) DeletePermissionCallCount() int {
	fake.deletePermissionMutex.RLock()
	defer fake.deletePermissionMutex.RUnlock()
	return len(fake.deletePermissionArgsForCall)
}

func (fake *FakeCredHubAPI) DeletePermissionCalls(stub func(string) (*permissions.Permission, error)) {
	fake.deletePermissionMutex.Lock()
	defer fake.deletePermissionMutex.Unlock()
	fake.DeletePermissionStub = stub
}

func (fake *FakeCredHubAPI) DeletePermissionArgsForCall(i int) string {
	fake.deletePermissionMutex.RLock()
	defer fake.deletePermissionMutex.RUnlock()
	argsForCall := fake.deletePermissionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCredHubAPI) DeletePermissionReturns(result1 *permissions.Permission, result2 error) {
	fake.deletePermissionMutex.Lock()
	defer fake.deletePermissionMutex.Unlock()
	fake.DeletePermissionStub = nil
	fake.deletePermissionReturns = struct {
		result1 *permissions.Permission
		result2 error
	}{result1, result2}
}

func (fake *FakeCredHubAPI) DeletePermissionReturnsOnCall(i int, result1 *permissions.Permission, result2 error) {
	fake.deletePermissionMutex.Lock()
	defer fake.deletePermissionMutex.Unlock()
	fake.DeletePermissionStub = nil
	if fake.deletePermissionReturnsOnCall == nil {
		fake.deletePermissionReturnsOnCall = make(map[int]struct {
			result1 *permissions.Permission
			result2 error
		})
	}
	fake.deletePermissionReturnsOnCall[i] = struct {
		result1 *permissions.Permission
		result2 error
	}{result1, result2}
}

func (fake *FakeCredHubAPI) FindByPath(arg1 string) (credentials.FindResults, error) {
	fake.findByPathMutex.Lock()
	ret, specificReturn := fake.findByPathReturnsOnCall[len(fake.findByPathArgsForCall)]
	fake.findByPathArgsForCall = append(fake.findByPathArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("FindByPath", []interface{}{arg1})
	fake.findByPathMutex.Unlock()
	if fake.FindByPathStub != nil {
		return fake.FindByPathStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.findByPathReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCredHubAPI) FindByPathCallCount() int {
	fake.findByPathMutex.RLock()
	defer fake.findByPathMutex.RUnlock()
	return len(fake.findByPathArgsForCall)
}

func (fake *FakeCredHubAPI) FindByPathCalls(stub func(string) (credentials.FindResults, error)) {
	fake.findByPathMutex.Lock()
	defer fake.findByPathMutex.Unlock()
	fake.FindByPathStub = stub
}

func (fake *FakeCredHubAPI) FindByPathArgsForCall(i int) string {
	fake.findByPathMutex.RLock()
	defer fake.findByPathMutex.RUnlock()
	argsForCall := fake.findByPathArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCredHubAPI) FindByPathReturns(result1 credentials.FindResults, result2 error) {
	fake.findByPathMutex.Lock()
	defer fake.findByPathMutex.Unlock()
	fake.FindByPathStub = nil
	fake.findByPathReturns = struct {
		result1 credentials.FindResults
		result2 error
	}{result1, result2}
}

func (fake *FakeCredHubAPI) FindByPathReturnsOnCall(i int, result1 credentials.FindResults, result2 error) {
	fake.findByPathMutex.Lock()
	defer fake.findByPathMutex.Unlock()
	fake.FindByPathStub = nil
	if fake.findByPathReturnsOnCall == nil {
		fake.findByPathReturnsOnCall = make(map[int]struct {
			result1 credentials.FindResults
			result2 error
		})
	}
	fake.findByPathReturnsOnCall[i] = struct {
		result1 credentials.FindResults
		result2 error
	}{result1, result2}
}

func (fake *FakeCredHubAPI) GetPermissionByPathActor(arg1 string, arg2 string) (*permissions.Permission, error) {
	fake.getPermissionByPathActorMutex.Lock()
	ret, specificReturn := fake.getPermissionByPathActorReturnsOnCall[len(fake.getPermissionByPathActorArgsForCall)]
	fake.getPermissionByPathActorArgsForCall = append(fake.getPermissionByPathActorArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetPermissionByPathActor", []interface{}{arg1, arg2})
	fake.getPermissionByPathActorMutex.Unlock()
	if fake.GetPermissionByPathActorStub != nil {
		return fake.GetPermissionByPathActorStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getPermissionByPathActorReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCredHubAPI) GetPermissionByPathActorCallCount() int {
	fake.getPermissionByPathActorMutex.RLock()
	defer fake.getPermissionByPathActorMutex.RUnlock()
	return len(fake.getPermissionByPathActorArgsForCall)
}

func (fake *FakeCredHubAPI) GetPermissionByPathActorCalls(stub func(string, string) (*permissions.Permission, error)) {
	fake.getPermissionByPathActorMutex.Lock()
	defer fake.getPermissionByPathActorMutex.Unlock()
	fake.GetPermissionByPathActorStub = stub
}

func (fake *FakeCredHubAPI) GetPermissionByPathActorArgsForCall(i int) (string, string) {
	fake.getPermissionByPathActorMutex.RLock()
	defer fake.getPermissionByPathActorMutex.RUnlock()
	argsForCall := fake.getPermissionByPathActorArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCredHubAPI) GetPermissionByPathActorReturns(result1 *permissions.Permission, result2 error) {
	fake.getPermissionByPathActorMutex.Lock()
	defer fake.getPermissionByPathActorMutex.Unlock()
	fake.GetPermissionByPathActorStub = nil
	fake.getPermissionByPathActorReturns = struct {
		result1 *permissions.Permission
		result2 error
	}{result1, result2}
}

func (fake *FakeCredHubAPI) GetPermissionByPathActorReturnsOnCall(i int, result1 *permissions.Permission, result2 error) {
	fake.getPermissionByPathActorMutex.Lock()
	defer fake.getPermissionByPathActorMutex.Unlock()
	fake.GetPermissionByPathActorStub = nil
	if fake.getPermissionByPathActorReturnsOnCall == nil {
		fake.getPermissionByPathActorReturnsOnCall = make(map[int]struct {
			result1 *permissions.Permission
			result2 error
		})
	}
	fake.getPermissionByPathActorReturnsOnCall[i] = struct {
		result1 *permissions.Permission
		result2 error
	}{result1, result2}
}

func (fake *FakeCredHubAPI) UpdatePermission(arg1 string, arg2 string, arg3 string, arg4 []string) (*permissions.Permission, error) {
	var arg4Copy []string
	if arg4 != nil {
		arg4Copy = make([]string, len(arg4))
		copy(arg4Copy, arg4)
	}
	fake.updatePermissionMutex.Lock()
	ret, specificReturn := fake.updatePermissionReturnsOnCall[len(fake.updatePermissionArgsForCall)]
	fake.updatePermissionArgsForCall = append(fake.updatePermissionArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 []string
	}{arg1, arg2, arg3, arg4Copy})
	fake.recordInvocation("UpdatePermission", []interface{}{arg1, arg2, arg3, arg4Copy})
	fake.updatePermissionMutex.Unlock()
	if fake.UpdatePermissionStub != nil {
		return fake.UpdatePermissionStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updatePermissionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCredHubAPI) UpdatePermissionCallCount() int {
	fake.updatePermissionMutex.RLock()
	defer fake.updatePermissionMutex.RUnlock()
	return len(fake.updatePermissionArgsForCall)
}

func (fake *FakeCredHubAPI) UpdatePermissionCalls(stub func(string, string, string, []string) (*permissions.Permission, error)) {
	fake.updatePermissionMutex.Lock()
	defer fake.updatePermissionMutex.Unlock()
	fake.UpdatePermissionStub = stub
}

func (fake *FakeCredHubAPI) UpdatePermissionArgsForCall(i int) (string, string, string, []string) {
	fake.updatePermissionMutex.RLock()
	defer fake.updatePermissionMutex.RUnlock()
	argsForCall := fake.updatePermissionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCredHubAPI) UpdatePermissionReturns(result1 *permissions.Permission, result2 error) {
	fake.updatePermissionMutex.Lock()
	defer fake.updatePermissionMutex.Unlock()
	fake.UpdatePermissionStub = nil
	fake.updatePermissionReturns = struct {
		result1 *permissions.Permission
		result2 error
	}{result1, result2}
}

func (fake *FakeCredHubAPI) UpdatePermissionReturnsOnCall(i int, result1 *permissions.Permission, result2 error) {
	fake.updatePermissionMutex.Lock()
	defer fake.updatePermissionMutex.Unlock()
	fake.UpdatePermissionStub = nil
	if fake.updatePermissionReturnsOnCall == nil {
		fake.updatePermissionReturnsOnCall = make(map[int]struct {
			result1 *permissions.Permission
			result2 error
		})
	}
	fake.updatePermissionReturnsOnCall[i] = struct {
		result1 *permissions.Permission
		result2 error
	}{result1, result2}
}

func (fake *FakeCredHubAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addPermissionMutex.RLock()
	defer fake.addPermissionMutex.RUnlock()
	fake.deleteCredentialMutex.RLock()
	defer fake.deleteCredentialMutex.RUnlock()
	fake.deletePermissionMutex.RLock()
	defer fake.deletePermissionMutex.RUnlock()
	fake.findByPathMutex.RLock()
	defer fake.findByPathMutex.RUnlock()
	fake.getPermissionByPathActorMutex.RLock()
	defer fake.getPermissionByPathActorMutex.RUnlock()
	fake.updatePermissionMutex.RLock()
	defer fake.updatePermissionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCredHubAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ interfaces.CredHubAPI = new(FakeCredHubAPI)
