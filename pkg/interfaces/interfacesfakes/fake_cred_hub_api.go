// Code generated by counterfeiter. DO NOT EDIT.
package interfacesfakes

import (
	sync "sync"

	permissions "code.cloudfoundry.org/credhub-cli/credhub/permissions"
	interfaces "github.com/cf-platform-eng/uaa-client-crud/pkg/interfaces"
)

type FakeCredHubAPI struct {
	AddPermissionStub        func(string, string, []string) (*permissions.Permission, error)
	addPermissionMutex       sync.RWMutex
	addPermissionArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 []string
	}
	addPermissionReturns struct {
		result1 *permissions.Permission
		result2 error
	}
	addPermissionReturnsOnCall map[int]struct {
		result1 *permissions.Permission
		result2 error
	}
	GetPermissionByPathActorStub        func(string, string) (*permissions.Permission, error)
	getPermissionByPathActorMutex       sync.RWMutex
	getPermissionByPathActorArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getPermissionByPathActorReturns struct {
		result1 *permissions.Permission
		result2 error
	}
	getPermissionByPathActorReturnsOnCall map[int]struct {
		result1 *permissions.Permission
		result2 error
	}
	UpdatePermissionStub        func(string, string, string, []string) (*permissions.Permission, error)
	updatePermissionMutex       sync.RWMutex
	updatePermissionArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 []string
	}
	updatePermissionReturns struct {
		result1 *permissions.Permission
		result2 error
	}
	updatePermissionReturnsOnCall map[int]struct {
		result1 *permissions.Permission
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCredHubAPI) AddPermission(arg1 string, arg2 string, arg3 []string) (*permissions.Permission, error) {
	var arg3Copy []string
	if arg3 != nil {
		arg3Copy = make([]string, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.addPermissionMutex.Lock()
	ret, specificReturn := fake.addPermissionReturnsOnCall[len(fake.addPermissionArgsForCall)]
	fake.addPermissionArgsForCall = append(fake.addPermissionArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 []string
	}{arg1, arg2, arg3Copy})
	fake.recordInvocation("AddPermission", []interface{}{arg1, arg2, arg3Copy})
	fake.addPermissionMutex.Unlock()
	if fake.AddPermissionStub != nil {
		return fake.AddPermissionStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.addPermissionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCredHubAPI) AddPermissionCallCount() int {
	fake.addPermissionMutex.RLock()
	defer fake.addPermissionMutex.RUnlock()
	return len(fake.addPermissionArgsForCall)
}

func (fake *FakeCredHubAPI) AddPermissionCalls(stub func(string, string, []string) (*permissions.Permission, error)) {
	fake.addPermissionMutex.Lock()
	defer fake.addPermissionMutex.Unlock()
	fake.AddPermissionStub = stub
}

func (fake *FakeCredHubAPI) AddPermissionArgsForCall(i int) (string, string, []string) {
	fake.addPermissionMutex.RLock()
	defer fake.addPermissionMutex.RUnlock()
	argsForCall := fake.addPermissionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCredHubAPI) AddPermissionReturns(result1 *permissions.Permission, result2 error) {
	fake.addPermissionMutex.Lock()
	defer fake.addPermissionMutex.Unlock()
	fake.AddPermissionStub = nil
	fake.addPermissionReturns = struct {
		result1 *permissions.Permission
		result2 error
	}{result1, result2}
}

func (fake *FakeCredHubAPI) AddPermissionReturnsOnCall(i int, result1 *permissions.Permission, result2 error) {
	fake.addPermissionMutex.Lock()
	defer fake.addPermissionMutex.Unlock()
	fake.AddPermissionStub = nil
	if fake.addPermissionReturnsOnCall == nil {
		fake.addPermissionReturnsOnCall = make(map[int]struct {
			result1 *permissions.Permission
			result2 error
		})
	}
	fake.addPermissionReturnsOnCall[i] = struct {
		result1 *permissions.Permission
		result2 error
	}{result1, result2}
}

func (fake *FakeCredHubAPI) GetPermissionByPathActor(arg1 string, arg2 string) (*permissions.Permission, error) {
	fake.getPermissionByPathActorMutex.Lock()
	ret, specificReturn := fake.getPermissionByPathActorReturnsOnCall[len(fake.getPermissionByPathActorArgsForCall)]
	fake.getPermissionByPathActorArgsForCall = append(fake.getPermissionByPathActorArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetPermissionByPathActor", []interface{}{arg1, arg2})
	fake.getPermissionByPathActorMutex.Unlock()
	if fake.GetPermissionByPathActorStub != nil {
		return fake.GetPermissionByPathActorStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getPermissionByPathActorReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCredHubAPI) GetPermissionByPathActorCallCount() int {
	fake.getPermissionByPathActorMutex.RLock()
	defer fake.getPermissionByPathActorMutex.RUnlock()
	return len(fake.getPermissionByPathActorArgsForCall)
}

func (fake *FakeCredHubAPI) GetPermissionByPathActorCalls(stub func(string, string) (*permissions.Permission, error)) {
	fake.getPermissionByPathActorMutex.Lock()
	defer fake.getPermissionByPathActorMutex.Unlock()
	fake.GetPermissionByPathActorStub = stub
}

func (fake *FakeCredHubAPI) GetPermissionByPathActorArgsForCall(i int) (string, string) {
	fake.getPermissionByPathActorMutex.RLock()
	defer fake.getPermissionByPathActorMutex.RUnlock()
	argsForCall := fake.getPermissionByPathActorArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCredHubAPI) GetPermissionByPathActorReturns(result1 *permissions.Permission, result2 error) {
	fake.getPermissionByPathActorMutex.Lock()
	defer fake.getPermissionByPathActorMutex.Unlock()
	fake.GetPermissionByPathActorStub = nil
	fake.getPermissionByPathActorReturns = struct {
		result1 *permissions.Permission
		result2 error
	}{result1, result2}
}

func (fake *FakeCredHubAPI) GetPermissionByPathActorReturnsOnCall(i int, result1 *permissions.Permission, result2 error) {
	fake.getPermissionByPathActorMutex.Lock()
	defer fake.getPermissionByPathActorMutex.Unlock()
	fake.GetPermissionByPathActorStub = nil
	if fake.getPermissionByPathActorReturnsOnCall == nil {
		fake.getPermissionByPathActorReturnsOnCall = make(map[int]struct {
			result1 *permissions.Permission
			result2 error
		})
	}
	fake.getPermissionByPathActorReturnsOnCall[i] = struct {
		result1 *permissions.Permission
		result2 error
	}{result1, result2}
}

func (fake *FakeCredHubAPI) UpdatePermission(arg1 string, arg2 string, arg3 string, arg4 []string) (*permissions.Permission, error) {
	var arg4Copy []string
	if arg4 != nil {
		arg4Copy = make([]string, len(arg4))
		copy(arg4Copy, arg4)
	}
	fake.updatePermissionMutex.Lock()
	ret, specificReturn := fake.updatePermissionReturnsOnCall[len(fake.updatePermissionArgsForCall)]
	fake.updatePermissionArgsForCall = append(fake.updatePermissionArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 []string
	}{arg1, arg2, arg3, arg4Copy})
	fake.recordInvocation("UpdatePermission", []interface{}{arg1, arg2, arg3, arg4Copy})
	fake.updatePermissionMutex.Unlock()
	if fake.UpdatePermissionStub != nil {
		return fake.UpdatePermissionStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updatePermissionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCredHubAPI) UpdatePermissionCallCount() int {
	fake.updatePermissionMutex.RLock()
	defer fake.updatePermissionMutex.RUnlock()
	return len(fake.updatePermissionArgsForCall)
}

func (fake *FakeCredHubAPI) UpdatePermissionCalls(stub func(string, string, string, []string) (*permissions.Permission, error)) {
	fake.updatePermissionMutex.Lock()
	defer fake.updatePermissionMutex.Unlock()
	fake.UpdatePermissionStub = stub
}

func (fake *FakeCredHubAPI) UpdatePermissionArgsForCall(i int) (string, string, string, []string) {
	fake.updatePermissionMutex.RLock()
	defer fake.updatePermissionMutex.RUnlock()
	argsForCall := fake.updatePermissionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCredHubAPI) UpdatePermissionReturns(result1 *permissions.Permission, result2 error) {
	fake.updatePermissionMutex.Lock()
	defer fake.updatePermissionMutex.Unlock()
	fake.UpdatePermissionStub = nil
	fake.updatePermissionReturns = struct {
		result1 *permissions.Permission
		result2 error
	}{result1, result2}
}

func (fake *FakeCredHubAPI) UpdatePermissionReturnsOnCall(i int, result1 *permissions.Permission, result2 error) {
	fake.updatePermissionMutex.Lock()
	defer fake.updatePermissionMutex.Unlock()
	fake.UpdatePermissionStub = nil
	if fake.updatePermissionReturnsOnCall == nil {
		fake.updatePermissionReturnsOnCall = make(map[int]struct {
			result1 *permissions.Permission
			result2 error
		})
	}
	fake.updatePermissionReturnsOnCall[i] = struct {
		result1 *permissions.Permission
		result2 error
	}{result1, result2}
}

func (fake *FakeCredHubAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addPermissionMutex.RLock()
	defer fake.addPermissionMutex.RUnlock()
	fake.getPermissionByPathActorMutex.RLock()
	defer fake.getPermissionByPathActorMutex.RUnlock()
	fake.updatePermissionMutex.RLock()
	defer fake.updatePermissionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCredHubAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ interfaces.CredHubAPI = new(FakeCredHubAPI)
