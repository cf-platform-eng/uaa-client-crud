// Code generated by counterfeiter. DO NOT EDIT.
package interfacesfakes

import (
	"sync"

	"github.com/cf-platform-eng/uaa-client-crud/pkg/interfaces"
	uaa "github.com/cloudfoundry-community/go-uaa"
)

type FakeUaaAPI struct {
	ChangeClientSecretStub        func(string, string) error
	changeClientSecretMutex       sync.RWMutex
	changeClientSecretArgsForCall []struct {
		arg1 string
		arg2 string
	}
	changeClientSecretReturns struct {
		result1 error
	}
	changeClientSecretReturnsOnCall map[int]struct {
		result1 error
	}
	CreateClientStub        func(uaa.Client) (*uaa.Client, error)
	createClientMutex       sync.RWMutex
	createClientArgsForCall []struct {
		arg1 uaa.Client
	}
	createClientReturns struct {
		result1 *uaa.Client
		result2 error
	}
	createClientReturnsOnCall map[int]struct {
		result1 *uaa.Client
		result2 error
	}
	DeleteClientStub        func(string) (*uaa.Client, error)
	deleteClientMutex       sync.RWMutex
	deleteClientArgsForCall []struct {
		arg1 string
	}
	deleteClientReturns struct {
		result1 *uaa.Client
		result2 error
	}
	deleteClientReturnsOnCall map[int]struct {
		result1 *uaa.Client
		result2 error
	}
	GetClientStub        func(string) (*uaa.Client, error)
	getClientMutex       sync.RWMutex
	getClientArgsForCall []struct {
		arg1 string
	}
	getClientReturns struct {
		result1 *uaa.Client
		result2 error
	}
	getClientReturnsOnCall map[int]struct {
		result1 *uaa.Client
		result2 error
	}
	UpdateClientStub        func(uaa.Client) (*uaa.Client, error)
	updateClientMutex       sync.RWMutex
	updateClientArgsForCall []struct {
		arg1 uaa.Client
	}
	updateClientReturns struct {
		result1 *uaa.Client
		result2 error
	}
	updateClientReturnsOnCall map[int]struct {
		result1 *uaa.Client
		result2 error
	}
	ValidateStub        func() error
	validateMutex       sync.RWMutex
	validateArgsForCall []struct {
	}
	validateReturns struct {
		result1 error
	}
	validateReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUaaAPI) ChangeClientSecret(arg1 string, arg2 string) error {
	fake.changeClientSecretMutex.Lock()
	ret, specificReturn := fake.changeClientSecretReturnsOnCall[len(fake.changeClientSecretArgsForCall)]
	fake.changeClientSecretArgsForCall = append(fake.changeClientSecretArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("ChangeClientSecret", []interface{}{arg1, arg2})
	fake.changeClientSecretMutex.Unlock()
	if fake.ChangeClientSecretStub != nil {
		return fake.ChangeClientSecretStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.changeClientSecretReturns
	return fakeReturns.result1
}

func (fake *FakeUaaAPI) ChangeClientSecretCallCount() int {
	fake.changeClientSecretMutex.RLock()
	defer fake.changeClientSecretMutex.RUnlock()
	return len(fake.changeClientSecretArgsForCall)
}

func (fake *FakeUaaAPI) ChangeClientSecretCalls(stub func(string, string) error) {
	fake.changeClientSecretMutex.Lock()
	defer fake.changeClientSecretMutex.Unlock()
	fake.ChangeClientSecretStub = stub
}

func (fake *FakeUaaAPI) ChangeClientSecretArgsForCall(i int) (string, string) {
	fake.changeClientSecretMutex.RLock()
	defer fake.changeClientSecretMutex.RUnlock()
	argsForCall := fake.changeClientSecretArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUaaAPI) ChangeClientSecretReturns(result1 error) {
	fake.changeClientSecretMutex.Lock()
	defer fake.changeClientSecretMutex.Unlock()
	fake.ChangeClientSecretStub = nil
	fake.changeClientSecretReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUaaAPI) ChangeClientSecretReturnsOnCall(i int, result1 error) {
	fake.changeClientSecretMutex.Lock()
	defer fake.changeClientSecretMutex.Unlock()
	fake.ChangeClientSecretStub = nil
	if fake.changeClientSecretReturnsOnCall == nil {
		fake.changeClientSecretReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.changeClientSecretReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUaaAPI) CreateClient(arg1 uaa.Client) (*uaa.Client, error) {
	fake.createClientMutex.Lock()
	ret, specificReturn := fake.createClientReturnsOnCall[len(fake.createClientArgsForCall)]
	fake.createClientArgsForCall = append(fake.createClientArgsForCall, struct {
		arg1 uaa.Client
	}{arg1})
	fake.recordInvocation("CreateClient", []interface{}{arg1})
	fake.createClientMutex.Unlock()
	if fake.CreateClientStub != nil {
		return fake.CreateClientStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createClientReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUaaAPI) CreateClientCallCount() int {
	fake.createClientMutex.RLock()
	defer fake.createClientMutex.RUnlock()
	return len(fake.createClientArgsForCall)
}

func (fake *FakeUaaAPI) CreateClientCalls(stub func(uaa.Client) (*uaa.Client, error)) {
	fake.createClientMutex.Lock()
	defer fake.createClientMutex.Unlock()
	fake.CreateClientStub = stub
}

func (fake *FakeUaaAPI) CreateClientArgsForCall(i int) uaa.Client {
	fake.createClientMutex.RLock()
	defer fake.createClientMutex.RUnlock()
	argsForCall := fake.createClientArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUaaAPI) CreateClientReturns(result1 *uaa.Client, result2 error) {
	fake.createClientMutex.Lock()
	defer fake.createClientMutex.Unlock()
	fake.CreateClientStub = nil
	fake.createClientReturns = struct {
		result1 *uaa.Client
		result2 error
	}{result1, result2}
}

func (fake *FakeUaaAPI) CreateClientReturnsOnCall(i int, result1 *uaa.Client, result2 error) {
	fake.createClientMutex.Lock()
	defer fake.createClientMutex.Unlock()
	fake.CreateClientStub = nil
	if fake.createClientReturnsOnCall == nil {
		fake.createClientReturnsOnCall = make(map[int]struct {
			result1 *uaa.Client
			result2 error
		})
	}
	fake.createClientReturnsOnCall[i] = struct {
		result1 *uaa.Client
		result2 error
	}{result1, result2}
}

func (fake *FakeUaaAPI) DeleteClient(arg1 string) (*uaa.Client, error) {
	fake.deleteClientMutex.Lock()
	ret, specificReturn := fake.deleteClientReturnsOnCall[len(fake.deleteClientArgsForCall)]
	fake.deleteClientArgsForCall = append(fake.deleteClientArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DeleteClient", []interface{}{arg1})
	fake.deleteClientMutex.Unlock()
	if fake.DeleteClientStub != nil {
		return fake.DeleteClientStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteClientReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUaaAPI) DeleteClientCallCount() int {
	fake.deleteClientMutex.RLock()
	defer fake.deleteClientMutex.RUnlock()
	return len(fake.deleteClientArgsForCall)
}

func (fake *FakeUaaAPI) DeleteClientCalls(stub func(string) (*uaa.Client, error)) {
	fake.deleteClientMutex.Lock()
	defer fake.deleteClientMutex.Unlock()
	fake.DeleteClientStub = stub
}

func (fake *FakeUaaAPI) DeleteClientArgsForCall(i int) string {
	fake.deleteClientMutex.RLock()
	defer fake.deleteClientMutex.RUnlock()
	argsForCall := fake.deleteClientArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUaaAPI) DeleteClientReturns(result1 *uaa.Client, result2 error) {
	fake.deleteClientMutex.Lock()
	defer fake.deleteClientMutex.Unlock()
	fake.DeleteClientStub = nil
	fake.deleteClientReturns = struct {
		result1 *uaa.Client
		result2 error
	}{result1, result2}
}

func (fake *FakeUaaAPI) DeleteClientReturnsOnCall(i int, result1 *uaa.Client, result2 error) {
	fake.deleteClientMutex.Lock()
	defer fake.deleteClientMutex.Unlock()
	fake.DeleteClientStub = nil
	if fake.deleteClientReturnsOnCall == nil {
		fake.deleteClientReturnsOnCall = make(map[int]struct {
			result1 *uaa.Client
			result2 error
		})
	}
	fake.deleteClientReturnsOnCall[i] = struct {
		result1 *uaa.Client
		result2 error
	}{result1, result2}
}

func (fake *FakeUaaAPI) GetClient(arg1 string) (*uaa.Client, error) {
	fake.getClientMutex.Lock()
	ret, specificReturn := fake.getClientReturnsOnCall[len(fake.getClientArgsForCall)]
	fake.getClientArgsForCall = append(fake.getClientArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetClient", []interface{}{arg1})
	fake.getClientMutex.Unlock()
	if fake.GetClientStub != nil {
		return fake.GetClientStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getClientReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUaaAPI) GetClientCallCount() int {
	fake.getClientMutex.RLock()
	defer fake.getClientMutex.RUnlock()
	return len(fake.getClientArgsForCall)
}

func (fake *FakeUaaAPI) GetClientCalls(stub func(string) (*uaa.Client, error)) {
	fake.getClientMutex.Lock()
	defer fake.getClientMutex.Unlock()
	fake.GetClientStub = stub
}

func (fake *FakeUaaAPI) GetClientArgsForCall(i int) string {
	fake.getClientMutex.RLock()
	defer fake.getClientMutex.RUnlock()
	argsForCall := fake.getClientArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUaaAPI) GetClientReturns(result1 *uaa.Client, result2 error) {
	fake.getClientMutex.Lock()
	defer fake.getClientMutex.Unlock()
	fake.GetClientStub = nil
	fake.getClientReturns = struct {
		result1 *uaa.Client
		result2 error
	}{result1, result2}
}

func (fake *FakeUaaAPI) GetClientReturnsOnCall(i int, result1 *uaa.Client, result2 error) {
	fake.getClientMutex.Lock()
	defer fake.getClientMutex.Unlock()
	fake.GetClientStub = nil
	if fake.getClientReturnsOnCall == nil {
		fake.getClientReturnsOnCall = make(map[int]struct {
			result1 *uaa.Client
			result2 error
		})
	}
	fake.getClientReturnsOnCall[i] = struct {
		result1 *uaa.Client
		result2 error
	}{result1, result2}
}

func (fake *FakeUaaAPI) UpdateClient(arg1 uaa.Client) (*uaa.Client, error) {
	fake.updateClientMutex.Lock()
	ret, specificReturn := fake.updateClientReturnsOnCall[len(fake.updateClientArgsForCall)]
	fake.updateClientArgsForCall = append(fake.updateClientArgsForCall, struct {
		arg1 uaa.Client
	}{arg1})
	fake.recordInvocation("UpdateClient", []interface{}{arg1})
	fake.updateClientMutex.Unlock()
	if fake.UpdateClientStub != nil {
		return fake.UpdateClientStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateClientReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUaaAPI) UpdateClientCallCount() int {
	fake.updateClientMutex.RLock()
	defer fake.updateClientMutex.RUnlock()
	return len(fake.updateClientArgsForCall)
}

func (fake *FakeUaaAPI) UpdateClientCalls(stub func(uaa.Client) (*uaa.Client, error)) {
	fake.updateClientMutex.Lock()
	defer fake.updateClientMutex.Unlock()
	fake.UpdateClientStub = stub
}

func (fake *FakeUaaAPI) UpdateClientArgsForCall(i int) uaa.Client {
	fake.updateClientMutex.RLock()
	defer fake.updateClientMutex.RUnlock()
	argsForCall := fake.updateClientArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUaaAPI) UpdateClientReturns(result1 *uaa.Client, result2 error) {
	fake.updateClientMutex.Lock()
	defer fake.updateClientMutex.Unlock()
	fake.UpdateClientStub = nil
	fake.updateClientReturns = struct {
		result1 *uaa.Client
		result2 error
	}{result1, result2}
}

func (fake *FakeUaaAPI) UpdateClientReturnsOnCall(i int, result1 *uaa.Client, result2 error) {
	fake.updateClientMutex.Lock()
	defer fake.updateClientMutex.Unlock()
	fake.UpdateClientStub = nil
	if fake.updateClientReturnsOnCall == nil {
		fake.updateClientReturnsOnCall = make(map[int]struct {
			result1 *uaa.Client
			result2 error
		})
	}
	fake.updateClientReturnsOnCall[i] = struct {
		result1 *uaa.Client
		result2 error
	}{result1, result2}
}

func (fake *FakeUaaAPI) Validate() error {
	fake.validateMutex.Lock()
	ret, specificReturn := fake.validateReturnsOnCall[len(fake.validateArgsForCall)]
	fake.validateArgsForCall = append(fake.validateArgsForCall, struct {
	}{})
	fake.recordInvocation("Validate", []interface{}{})
	fake.validateMutex.Unlock()
	if fake.ValidateStub != nil {
		return fake.ValidateStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.validateReturns
	return fakeReturns.result1
}

func (fake *FakeUaaAPI) ValidateCallCount() int {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	return len(fake.validateArgsForCall)
}

func (fake *FakeUaaAPI) ValidateCalls(stub func() error) {
	fake.validateMutex.Lock()
	defer fake.validateMutex.Unlock()
	fake.ValidateStub = stub
}

func (fake *FakeUaaAPI) ValidateReturns(result1 error) {
	fake.validateMutex.Lock()
	defer fake.validateMutex.Unlock()
	fake.ValidateStub = nil
	fake.validateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUaaAPI) ValidateReturnsOnCall(i int, result1 error) {
	fake.validateMutex.Lock()
	defer fake.validateMutex.Unlock()
	fake.ValidateStub = nil
	if fake.validateReturnsOnCall == nil {
		fake.validateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.validateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUaaAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.changeClientSecretMutex.RLock()
	defer fake.changeClientSecretMutex.RUnlock()
	fake.createClientMutex.RLock()
	defer fake.createClientMutex.RUnlock()
	fake.deleteClientMutex.RLock()
	defer fake.deleteClientMutex.RUnlock()
	fake.getClientMutex.RLock()
	defer fake.getClientMutex.RUnlock()
	fake.updateClientMutex.RLock()
	defer fake.updateClientMutex.RUnlock()
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUaaAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ interfaces.UaaAPI = new(FakeUaaAPI)
